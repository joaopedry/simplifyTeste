<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="tbIdUsuario.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>